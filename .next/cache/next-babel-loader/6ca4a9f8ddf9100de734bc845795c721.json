{"ast":null,"code":"const language = 'es';\nconst TEXTS = [{\n  key: 'vegan',\n  es: 'Vegano',\n  en: 'Vegan'\n}, {\n  key: 'vegetarian',\n  es: 'Vegetariano',\n  en: 'Vegetarian'\n}, {\n  key: 'indifferent',\n  es: 'Indiferente',\n  en: 'Indifferent'\n}, {\n  key: 'type.of.food',\n  es: 'Seleccione tipo de comida',\n  en: 'Select type of food'\n}, {\n  key: 'recipes',\n  es: 'Recetas',\n  en: 'Recipes'\n}];\nexport default (key => {\n  try {\n    debugger;\n    return TEXTS.find(t => t.key === key)[language];\n  } catch (error) {\n    console.log(`Error find the key: ${key}`);\n    return key;\n  }\n});","map":{"version":3,"sources":["/Users/damiangianni/Documents/Workspace/que-cocino/utils/translation.js"],"names":["language","TEXTS","key","es","en","find","t","error","console","log"],"mappings":"AACA,MAAMA,QAAQ,GAAG,IAAjB;AACA,MAAMC,KAAK,GAAG,CACb;AACCC,EAAAA,GAAG,EAAE,OADN;AAECC,EAAAA,EAAE,EAAE,QAFL;AAGCC,EAAAA,EAAE,EAAE;AAHL,CADa,EAMb;AACCF,EAAAA,GAAG,EAAE,YADN;AAECC,EAAAA,EAAE,EAAE,aAFL;AAGCC,EAAAA,EAAE,EAAE;AAHL,CANa,EAWb;AACCF,EAAAA,GAAG,EAAE,aADN;AAECC,EAAAA,EAAE,EAAE,aAFL;AAGCC,EAAAA,EAAE,EAAE;AAHL,CAXa,EAgBb;AACCF,EAAAA,GAAG,EAAE,cADN;AAECC,EAAAA,EAAE,EAAE,2BAFL;AAGCC,EAAAA,EAAE,EAAE;AAHL,CAhBa,EAqBb;AACCF,EAAAA,GAAG,EAAE,SADN;AAECC,EAAAA,EAAE,EAAE,SAFL;AAGCC,EAAAA,EAAE,EAAE;AAHL,CArBa,CAAd;AA4BA,gBAAgBF,GAAD,IAAS;AACvB,MAAI;AACH;AACA,WAAOD,KAAK,CAACI,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACJ,GAAF,KAAUA,GAA1B,EAA+BF,QAA/B,CAAP;AACA,GAHD,CAGE,OAAOO,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBP,GAAI,EAAvC;AACA,WAAOA,GAAP;AACA;AAED,CATD","sourcesContent":["\nconst language = 'es';\nconst TEXTS = [\n\t{\n\t\tkey: 'vegan',\n\t\tes: 'Vegano',\n\t\ten: 'Vegan'\n\t},\n\t{\n\t\tkey: 'vegetarian',\n\t\tes: 'Vegetariano',\n\t\ten: 'Vegetarian'\n\t},\n\t{\n\t\tkey: 'indifferent',\n\t\tes: 'Indiferente',\n\t\ten: 'Indifferent'\n\t},\n\t{\n\t\tkey: 'type.of.food',\n\t\tes: 'Seleccione tipo de comida',\n\t\ten: 'Select type of food'\n\t},\n\t{\n\t\tkey: 'recipes',\n\t\tes: 'Recetas',\n\t\ten: 'Recipes'\n\t},\n];\n\nexport default (key) => {\n\ttry {\n\t\tdebugger;\n\t\treturn TEXTS.find(t => t.key === key)[language]\n\t} catch (error) {\n\t\tconsole.log(`Error find the key: ${key}`);\n\t\treturn key;\n\t}\n\n};"]},"metadata":{},"sourceType":"module"}